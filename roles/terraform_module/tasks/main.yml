---
- name: Ensure a module path is defined
  ansible.builtin.assert:
    that:
      - terraform_module_source is defined
    fail_msg: "terraform_module_source must be defined"

- name: Ensure either a backend or work directory is defined
  ansible.builtin.assert:
    that:
      - terraform_module_workdir is defined or terraform_module_backend_config != terraform_module_backend_config_default
    fail_msg: "Either terraform_module_workdir or terraform_module_backend_config must be defined to avoid discarding state."
  vars:
    terraform_module_backend_config_default:
      local: {}

- name: Create a temporary directory
  ansible.builtin.tempfile:
    state: directory
  register: terraform_module_temporary_directory
  when: terraform_module_workdir is not defined

- name: Set working directory from temporary directory
  ansible.builtin.set_fact:
    _terraform_module_workdir: "{{ terraform_module_temporary_directory['path'] }}"
  when: terraform_module_workdir is not defined

- name: Set working directory from variable
  ansible.builtin.set_fact:
    _terraform_module_workdir: "{{ terraform_module_workdir }}"
  when: terraform_module_workdir is defined

- name: Write root module configuration
  ansible.builtin.template:
    src: main.tf.json.j2
    dest: "{{ _terraform_module_workdir }}/main.tf.json"
  vars:
    terraform_module_version_argument: "{{ terraform_module_version is defined | ternary({'version': terraform_module_version}, {}) }}"
    terraform_module_config_base:
      terraform:
        backend: "{{ terraform_module_backend_config }}"
      module:
        this: "{{ terraform_module_inputs | combine({'source': terraform_module_source}) | combine(terraform_module_version_argument) }}"
      output:
        this:
          value: "${module.this}"
          sensitive: true
    terraform_module_config: "{{ terraform_module_config_base | combine(terraform_module_extra) }}"

- name: Generate a Terraform plan
  community.general.terraform:
    project_path: "{{ _terraform_module_workdir }}"
    force_init: true
    state: planned
    plan_file: "{{ inventory_hostname }}-plan.out"

- name: Register the Terraform plan
  ansible.builtin.command:
    cmd: "terraform show -no-color {{ inventory_hostname }}-plan.out"
    chdir: "{{ _terraform_module_workdir }}"
  register: terraform_module_plan

- name: Detect if there are any changes
  ansible.builtin.set_fact:
    terraform_module_plan_has_changes: '{{ terraform_module_plan.stdout is not ansible.builtin.match(multiline=true, pattern="(?s:.)*Terraform has compared your real infrastructure against your configuration(?s:.)+and found no differences, so no changes are needed.*") }}'

- name: Confirm and apply the plan
  block:
    - name: Display the Terraform plan
      ansible.builtin.debug:
        var: terraform_module_plan.stdout

    - name: Wait for confirmation
      ansible.builtin.pause:
        prompt: |
          Do you want to perform these actions?
            Terraform will perform the actions described above.
            Only 'yes' will be accepted to approve.

            Enter a value:
      register: terraform_module_confirmation

    - name: Pause before cleaning up
      ansible.builtin.pause:
        prompt: |
          Plan was not approved. The temporary directory at:

            {{ terraform_module_temporary_directory['path'] }}

          will be cleaned up in 5 seconds. If you wish to investigate the Terraform configuration, press Ctrl+C and abort
          this playbook now!
        seconds: 5
      when: terraform_module_confirmation.user_input != "yes" and terraform_module_workdir is not defined and terraform_module_workdir_clean_enabled

    - name: Apply the Terraform plan
      community.general.terraform:
        project_path: "{{ _terraform_module_workdir }}"
        state: present
        plan_file: "{{ inventory_hostname }}-plan.out"
      when: terraform_module_confirmation.user_input == "yes"
  when: terraform_module_plan_has_changes  # end of block

- name: Obtain the outputs from Terraform
  ansible.builtin.command:
    cmd: "terraform output -json"
    chdir: "{{ _terraform_module_workdir }}"
  register: terraform_module_outputs_default

- name: Save the outputs to the chosen variable
  ansible.builtin.set_fact:
    "{{ terraform_module_outputs_var }}": "{{ (terraform_module_outputs_default.stdout | from_json).this.value }}"

- name: Clean up temporary directory
  ansible.builtin.file:
    path: "{{ _terraform_module_workdir }}"
    state: absent
  when: terraform_module_workdir is not defined and terraform_module_workdir_clean_enabled

- name: Print temporary directory for investigation
  ansible.builtin.debug:
    msg: "Temporary directory has been retained at: {{ terraform_module_temporary_directory['path'] }}"
  when: terraform_module_workdir is not defined and not terraform_module_workdir_clean_enabled